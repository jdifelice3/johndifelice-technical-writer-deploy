{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hello, I\u2019m John DiFelice, an enterprise architect and published/produced author pivoting into technical writing.</p> <p>I\u2019ve spent 20+ years designing and documenting complex systems (cloud, integration, security, data) and just as long honing the craft of clear, engaging prose through fiction and playwriting. The result is deep technical credibility plus a strong narrative sense. This is what I bring to documentation.</p>"},{"location":"#what-i-bring-to-your-team","title":"What I Bring to Your Team","text":"<ul> <li> <p>Translating complexity into clarity   Architectural decisions, integration patterns, and operational procedures explained for both engineers and stakeholders.</p> </li> <li> <p>Domain Knowledge   \u25e6 Wealth Management and Banking:   \u00a0\u00a0\u00a0\u00a015 years of experience delivering software products for investment firms, banks, \u00a0\u00a0\u00a0\u00a0and REITs.   \u25e6 Health Insurance:   \u00a0\u00a0\u00a0\u00a05 years of experience documenting processes and methodologies for health insurance\u00a0\u00a0\u00a0\u00a0companies.   \u25e6 Telecommunications:   \u00a0\u00a0\u00a0\u00a06 years of experience developing, architecting, documenting, and leading knowledge\u00a0\u00a0\u00a0\u00a0transfer sessions for two large telecommunications companies.   \u25e6 Bitcoin/Crypto:   \u00a0\u00a0\u00a0\u00a03 years running a crypto startup. Produced detailed documentation of the product \u00a0\u00a0\u00a0\u00a0for investors.</p> </li> <li> <p>Docs-as-Code Experience   Markdown, Git, PR reviews, and CI-driven publishing (MkDocs). Treating docs as a first-class part of the build.</p> </li> <li> <p>The right tools   API references (OpenAPI/Swagger), quick starts, diagrams (Visio/Mermaid).</p> </li> <li> <p>Reader-first writing   I apply writing techniques to guide users, set context, reduce cognitive load, and anticipate questions.</p> </li> </ul>"},{"location":"#sample-outputs-youll-find-here","title":"Sample Outputs You\u2019ll Find Here","text":"<ul> <li>CRM Example \u2014 In the top nav. It is a link to technical documentation I wrote for a CRM app that functioned as a frontend to Zoho Recruit.</li> </ul>"},{"location":"#tooling-practices","title":"Tooling &amp; Practices","text":"<ul> <li>Authoring: Markdown, Google Docs, Confluence  </li> <li>Publishing: MkDocs (Material theme), GitHub Pages  </li> <li>APIs: OpenAPI/Swagger, Postman, Redoc-style outputs  </li> <li>Diagrams &amp; Media: Visio, Mermaid, Canva, draw.io.</li> <li>AI Video Tools: Synthesia, Descript, Lumen5.   </li> <li>Collaboration: GitHub, Bitbucket, Jira.</li> </ul>"},{"location":"#background","title":"Background","text":"<ul> <li>Enterprise Architecture: Azure, GCP, Node.js, ASP.NET Core, relational databases (postGres, SQL Server, Oracle), NoSQL databases (MongoDB, Google Firestore), RESTful and graphQL APIs, CI/CD, migration playbooks, incident response runbooks, and data flow documentation.  </li> <li>Creative Writing: two full-length plays produced in Philadelphia, plus a dozen short stories published in print, in anthologies, and online.</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#how-to-contact-me","title":"How to Contact Me:","text":"<p>Connect with me on LinkedIn and send me a message.</p> <p>LinkedIn</p>"},{"location":"CRM%20Example/description/","title":"Description","text":"<p>ZohoDataExplorer is a custom CRM app. I wrote 2 guides for it: a User Guide, and a Developer Guide.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/","title":"Introduction","text":"<p>This Developer Guide assumes that developers have experience in both React and Node.js programming.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/#what-is-zohodataexplorer","title":"What is ZohoDataExplorer?","text":"<p>ZohoDataExplorer is a grid-based, custom front-end for Zoho Recruit.</p> <p></p> <p>For more information about how it works, see the User Guide.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/#what-is-zohorecruit","title":"What is ZohoRecruit?","text":"<p>Zoho Recruit is a cloud-based applicant tracking system (ATS) and CRM system designed to help staffing agencies, corporate HR teams, and recruiters manage the entire hiring process. It\u2019s part of the broader Zoho ecosystem of business applications.</p> <p>Zoho Recruit can be used to manage client and contact data. Unfortunately, the app is not performant, has poorly documented features, is difficult to use--even for experienced users--and custom features developed by Zoho are cost-prohibitive.</p> <p>For these reasons, ZohoDataExplorer was created.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/#technical-details","title":"Technical Details","text":"Name Value Frontend React.js Backend Node.js + Express.js Database SQL Server Component Type functional Function Format arrow React Type module API Type REST JavaScript Common JS TypeScript No"},{"location":"CRM%20Example/guides/Developer%20Guide/2_source%20code%20editor/","title":"Source Code Editor","text":"<p>The recommended source code Editor is VS Code, but you may use whatever editor you like. If you want to use VS Code, but don't have it,  download and install it here:</p> <p>VS Code Download</p> <p>NOTE: Download VS Code, NOT Visual Studio.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/","title":"Project Structure","text":"<p>The VS Code project is full-stack, so it includes both the client and server code.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#client","title":"Client","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#folders","title":"Folders","text":"<p>Here is the directory structure for the client only:</p> <p></p> <p>The folder names are mostly self-explanatory, but here is a table that describes what each contains:</p> Folder Name Parent Description .vscode / A VS Code-specific file that contains launch.json and tasks.json client / The root folder of the front-end code. dist client Contains the build files. node_modules client This folder is created by the npm install process. All packages are contained here. public client Contains static assets (e.g. images) src client The root folder of the client (front-end) source code. assets src Other static assets. config src Functions that manage the development vs. production enrivonments. constants src Constants mostly related to the QueryBuilder component. hooks src Custom React hooks. pages src React components that represent web pages. services src Express.js client functions that call REST APIs on the server. styles src CSS files."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#files","title":"Files","text":"<p>Not all files are listed, only ones that require a description:</p> File Name Folder Description .gitignore client Contains the file and folders git should ignore. eslint.config.js client The ESLint config file. vite.config.js client Uses the <code>mode</code> argument passed in during the vite run call. Values are either <code>development</code> or <code>production</code>. It uses the value to load either <code>vite.config.dev.js</code> or <code>vite.config.prod.js</code>. vite.config.dev.js client The vite.config.js file for development. vite.config.prod.js client The vite.config.js file for production."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#server","title":"Server","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#folders_1","title":"Folders","text":"<p>Here is the directory structure for the server only:</p> <p></p> Folder Name Parent Description auth server Contains <code>zoho.js</code> which has the callback function to receive auth tokens from the Zoho API. config server Contains configuration json objects. middleware server Contains loggin middleware. node_modules server This folder is created by the npm install process. All packages are contained here. routes server Contains a route for the /api/data endpoint. services server Contains service functions for api calls, database connections, and Zoho authorization API calls. api services Functions for api calls. auth services Functions for Zoho API calls. db services Functions for database calls. tests / Test scripts written with <code>node:test</code> and <code>Supertest</code>."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#files_1","title":"Files","text":"<p>Not all files are listed here, only ones that require a description:</p> File Name Folder Description .env server Contains environment variables. .gitignore server Contains the file and folders git should ignore. server.js server The main server code. Contains Express.js REST and listener functions."},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/","title":"Zoho Connect API","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#introduction","title":"Introduction","text":"<p>Zoho Connect is an API that provides access tokens and refresh tokens which allow developers to programmatically fetch and edit data from Zoho Recruit.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#http-methods","title":"HTTP Methods","text":"<p>Zoho Connect's APIs enable reading and writing of data through the standard HTTP methods:</p> Method Description GET Used for retrieving resources. POST Used for creating resources and performing operations. PUT Used for updating resources. DELETE Used for deleting resources."},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#api-call-limit","title":"API Call Limit","text":"<p>There is no usage limit on the API, but we have system limitations as protection from denial of service (DOS) attacks.</p> <p>The default system limit is 50 new access tokens per day.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#generate-access-and-refresh-tokens","title":"Generate Access and Refresh Tokens","text":"<p>OAuth2.0 requests are usually authenticated with an access token, which is passed as a Bearer token. To use this access token, you need to construct a normal HTTP request and include it in an Authorization header along with the value of Bearer.</p> <p>Note: You must use your domain-specific Zoho Accounts URL to generate access and refresh tokens. The following are the various domains and their corresponding accounts URLs. For US: https://accounts.zoho.com For AU: https://accounts.zoho.com.au For EU: https://accounts.zoho.eu For IN: https://accounts.zoho.in For CN: https://accounts.zoho.com.cn For JP: https://accounts.zoho.jp</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#generate-access-and-refresh-tokens_1","title":"Generate access and refresh tokens:","text":"<p>Make a POST request with the following URL. Replace {Accounts_URL} with your domain-specific Zoho accounts URL when you make the request. <pre><code>{Accounts_URL}/oauth/v2/token\n</code></pre> Note: For security reasons, pass the below parameters in the body of your request as form-data.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#request-parameters","title":"Request Parameters","text":"Parameter Description grant_type Enter the value as \"authorization_code\". client_id Specify client-id obtained from the connected app. client_secret Specify client-secret obtained from the connected app. redirect_uri Specify the Callback URL that you registered during the app registration. code Enter the grant token generated from previous step. scope The scope of the access token. e.g. to create a token that has access to all modules, scopthe value should be ZohoRECRUIT.modules.all <p>If the request is successful, you would receive the following: <pre><code>{\n    \"access_token\": \"{access_token}\",\n    \"refresh_token\": \"{refresh_token}\",\n    \"api_domain\": \"https://www.zohoapis.com\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n}\n</code></pre>  For more information on how to create a valid Request, visit Zoho Connect Authentication</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#response-parameters","title":"Response Parameters","text":"Parameter Description access_token Access token to access ZohoAssist APIs. refresh_token Refresh token to obtain new access tokens. expires_in Time in seconds after which the access token expires. api_domain Domain name of the API. Use this domain in your requests to make API calls to Zoho Assist. token_type \"Bearer\" indicates this is an access token. <p>This completes the authentication. Once your app receives the access token, send the token in your HTTP authorization header to Zoho Assist API with the value \"Zoho-oauthtoken {access_token}\" for each endpoint (for each request).</p> <p>Note:</p> <ul> <li>Each access token is valid for only 1 hour and can be used only for the operations defined in the scope.</li> <li>A refresh token does not expire. Use it to refresh access tokens when they expire. For more details on the validity of the tokens, refer to Token Validity page.</li> <li>Use the value in the \"api_domain\" key to make API calls to Zoho Assist. The URL varies based on the environment:<ul> <li>For sandbox, the domain would be sandbox.zohoapis.{domain}. Example: https://sandbox.zohoapis.eu</li> <li>For developer, the domain would be developer.zohoapis.{domain}. Example: https://developer.zohoapis.au</li> </ul> </li> <li>If your application has more than one environment, the access and refresh token generated for a user becomes organization-specific in an environment. Thus, you cannot use tokens generated for an organization in one environment to make API calls to the organization in another environment. For instance, you cannot use tokens generated for an organization in the Production environment to make API calls to the organizations in the sandbox or developer accounts.</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/4_ZohoConnect/#possible-errors","title":"Possible Errors","text":"<p>invalid_client</p> <p>Resolution:You have passed an invalid Client ID or secret. Specify the correct client ID and secret. \u00a0\u00a0\u00a0\u00a0(or) There is a domain mismatch. You have registered the client and generated the grant token in a certain domain (US), but generating the tokens from a different domain (EU). Ensure that you generate the grant, access, and refresh tokens from the same domain using the same domain URL or Enable Multi-DC for your client to generate tokens from any domain. \u00a0\u00a0\u00a0\u00a0(or) You have passed the wrong client secret when multi-DC is enabled. Each DC holds a unique client secret. Ensure to pass the right client secret for that DC. </p> <p>invalid_code</p> <p>Resolution:The grant token has expired. The grant token is valid only for one minute in the redirection-based flow. Generate the access and refresh tokens before the grant token expires. \u00a0\u00a0\u00a0\u00a0(or) You have already used the grant token. You can use the grant token only once. \u00a0\u00a0\u00a0\u00a0(or) The refresh token to generate a new access token is wrong or revoked. Specify the correct refresh token value while refreshing an access token. </p> <p>invalid_redirect_uri</p> <p>Resolution:The redirect URI in the request mismatches the one registered in the developer console. Specify the correct redirect URI in the request. </p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/","title":"Zoho Recruit REST API","text":"<p>Zoho Recruit has standard modules such as Candidates, Job Openings, Contacts, Interviews, Reports, Assessments, etc. ZohoDataExplorer makes use of the Clients and Contacts modules.</p> <p>Here are two examples of the API calls made from ZohoDataExplorer:</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#get-list-of-modules","title":"Get list of modules","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#purpose","title":"Purpose","text":"<p>Retrieves module-related data. This call will get the list of modules available in your Zoho Recruit account.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#request-url","title":"Request URL","text":"<pre><code>https://recruit.zoho.com/recruit/v2/settings/modules\n</code></pre> <p>Get a specific module: <pre><code>https://recruit.zoho.com/recruit/v2/settings/modules/{module_api_name}\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#request-method","title":"Request Method","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0GET</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#scope","title":"Scope","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0scope=ZohoRecruit.setup.operation.all</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#possible-operation-types","title":"Possible operation types","text":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0ALL - Full data access \u00a0\u00a0\u00a0\u00a0\u00a0READ - Get module data</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#attributes","title":"Attributes","text":"<ul> <li>\"convertable\": Describes if the user can convert the record into another type of record. For example: Convert Candidates into Contacts.</li> <li>\"creatable\": Checks if the user can create a record in the current module.</li> <li>\"generated_type\": Describes the type of module which would be generated by the user. There are 4 types: default, web, custom, and linking.</li> <li>\"api_supported\": The modules which are currently not accessible by APIs have value as \"false\". If the modules are supported in the future, the value automatically changes to \"true\".</li> <li>\"modified_time\": The date and time at which the user has made a change.</li> </ul> <p>Note:</p> <ul> <li>Refer to the key api_name in the JSON data while accessing the resource. Every module, field, and the related list will have an API name, which you can use in third-party integrations. For example, if you want to access the Candidates module, use \u201cCandidates\" as the api_name every time you access the resource. Zoho Recruit generates API names internally while creating a custom module, custom field, or related list label. Please note that you cannot alter the API Names for the default modules, fields, and related lists. You can change the API names only for custom modules, fields, and related lists.</li> <li>The generated API name can contain only alphabets, numbers, and underscore. The API name should start with an alphabet and should not have two consecutive underscores or end with an underscore.</li> <li>Refer Response Structure for more details about the JSON keys, values, and their descriptions of the available modules. You can also use the sample response of each module as the input when you insert, update, or upsert a record in that corresponding module.</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#sample-request","title":"Sample Request","text":"<pre><code>curl \"https://recruit.zoho.com/recruit/v2/settings/modules\"\n-X GET\n-H \"Authorization: Zoho-oauthtoken 1000.03xxxxxxxxxxxxxxxxxa5317.dxxxxxxxxxxxxxxxxxfa\"\n</code></pre>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#sample-response","title":"Sample Response","text":"<pre><code>{ \n   \"modules\": [ \n       { \n           \"global_search_supported\": false, \n           \"deletable\": false, \n           \"creatable\": false, \n           \"modified_time\": null, \n           \"plural_label\": \"Home\", \n           \"presence_sub_menu\": false, \n           \"id\": \"100001000000002511\", \n           \"convertable\": false, \n           \"editable\": false, \n           \"emailTemplate_support\": false, \n           \"profiles\": [ \n               { \n                   \"name\": \"Administrator\", \n                   \"id\": \"100001000000017723\" \n               }, \n               { \n                   \"name\": \"Standard\", \n                   \"id\": \"100001000000017726\" \n               }, \n               { \n                   \"name\": \"Guest\", \n                   \"id\": \"100001000000017729\" \n               }, \n               { \n                   \"name\": \"Interviewer\", \n                   \"id\": \"100001000000017732\" \n               }, \n               { \n                   \"name\": \"Client Administrator\", \n                   \"id\": \"100001000000021138\" \n               }, \n               { \n                   \"name\": \"Client Interviewer\", \n                   \"id\": \"100001000000021459\" \n               } \n           ], \n           \"filter_supported\": false, \n           \"display_field\": null, \n           \"web_link\": null, \n           \"sequence_number\": 1, \n           \"singular_label\": \"Home\", \n           \"viewable\": true, \n           \"api_supported\": false, \n           \"api_name\": \"Home\", \n           \"quick_create\": false, \n           \"modified_by\": null, \n           \"generated_type\": \"default\", \n           \"scoring_supported\": false, \n           \"module_name\": \"Home\", \n           \"parent_module\": {} \n       }, \n       { \n           \"global_search_supported\": true, \n           \"deletable\": true, \n           \"creatable\": true, \n           \"modified_time\": null, \n           \"plural_label\": \"Job Openings\", \n           \"presence_sub_menu\": true, \n           \"id\": \"100001000000002521\", \n           \"convertable\": false, \n           \"editable\": true, \n           \"emailTemplate_support\": true, \n           \"profiles\": [ \n               { \n                   \"name\": \"Administrator\", \n                   \"id\": \"100001000000017723\" \n               }, \n               { \n                   \"name\": \"Standard\", \n                   \"id\": \"100001000000017726\" \n               }, \n               { \n                   \"name\": \"Guest\", \n                   \"id\": \"100001000000017729\" \n               }, \n               { \n                   \"name\": \"Interviewer\", \n                   \"id\": \"100001000000017732\" \n               }, \n               { \n                   \"name\": \"Client Administrator\", \n                   \"id\": \"100001000000021138\" \n               }, \n               { \n                   \"name\": \"Client Interviewer\", \n                   \"id\": \"100001000000021459\" \n               } \n           ], \n           \"filter_supported\": true, \n           \"display_field\": \"Potential_Name\", \n           \"web_link\": null, \n           \"sequence_number\": 2, \n           \"singular_label\": \"Job Opening\", \n           \"viewable\": true, \n           \"api_supported\": true, \n           \"api_name\": \"Job_Openings\", \n           \"quick_create\": true, \n           \"modified_by\": null, \n           \"generated_type\": \"default\", \n           \"scoring_supported\": true, \n           \"module_name\": \"Potentials\", \n           \"parent_module\": {} \n       }, \n       { \n           \"global_search_supported\": true, \n           \"deletable\": true, \n           \"creatable\": true, \n           \"modified_time\": \"2020-03-08T23:16:45+05:30\", \n           \"plural_label\": \"Candidates\", \n           \"presence_sub_menu\": true, \n           \"id\": \"100001000000002515\", \n           \"convertable\": true, \n           \"editable\": true, \n           \"emailTemplate_support\": true, \n           \"profiles\": [ \n               { \n                   \"name\": \"Administrator\", \n                   \"id\": \"100001000000017723\" \n               }, \n               { \n                   \"name\": \"Standard\", \n                   \"id\": \"100001000000017726\" \n               }, \n               { \n                   \"name\": \"Guest\", \n                   \"id\": \"100001000000017729\" \n               }, \n               { \n                   \"name\": \"Interviewer\", \n                   \"id\": \"100001000000017732\" \n               }, \n               { \n                   \"name\": \"Client Administrator\", \n                   \"id\": \"100001000000021138\" \n               }, \n               { \n                   \"name\": \"Client Interviewer\", \n                   \"id\": \"100001000000021459\" \n               } \n           ], \n           \"filter_supported\": true, \n           \"display_field\": \"Full_Name\", \n           \"web_link\": null, \n           \"sequence_number\": 3, \n           \"singular_label\": \"Candidate\", \n           \"viewable\": true, \n           \"api_supported\": true, \n           \"api_name\": \"Candidates\", \n           \"quick_create\": true, \n           \"modified_by\": { \n            \"name\": \"Vignesh MPG\", \n            \"id\": \"100001000000020618\" \n           }, \n           \"generated_type\": \"default\", \n           \"scoring_supported\": true, \n           \"module_name\": \"Candidates\", \n           \"parent_module\": {} \n       } \n   ] \n}\n</code></pre>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#get-all-clients","title":"Get All Clients","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#purpose_1","title":"Purpose","text":"<p>Retrieves a list of all client data to which the organization has access.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#request-url_1","title":"Request URL","text":"<pre><code>https://recruit.zoho.com/recruit/v2/Clients\n</code></pre> <p>Get a specific client: <pre><code>https://recruit.zoho.com/recruit/v2/Clients/{client id}\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#request-method_1","title":"Request Method","text":"<p>GET</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#scope_1","title":"Scope","text":"<p>scope=ZohoRecruit.modules.Clients.ALL</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#possible-operation-types_1","title":"Possible operation types","text":"<p>ALL - Full data access READ - Get module data</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#sample-request_1","title":"Sample Request","text":"<pre><code>curl \"https://recruit.zoho.com/recruit/v2/Clients\"\n-X GET\n-H \"Authorization: Zoho-oauthtoken 1000.03xxxxxxxxxxxxxxxxxa7135.dxxxxxxxxxxxxxxxxxfa\"\n</code></pre>"},{"location":"CRM%20Example/guides/Developer%20Guide/5_%20ZohoRecruitAPI/#sample-response_1","title":"Sample Response","text":"<pre><code>{\n    \"clients\":[\n        {\n            \"id\": \"741079000003325029\", \n            \"client_name\": \"South Coast Welding &amp; Manufacturing LLC\", \n            \"industry\": \"\", \n            \"created_time\": \"2025-05-07T14:13:42-05:00\",\n            \"modified_time\": \"2025-05-07T15:58:24-05:00\"\n        },\n        {\n            \"id\": \"741079000003307213\", \n            \"client_name\": \"Vanquish Yachts Maritime\", \n            \"industry\": \"Maritime\", \n            \"created_time\": \"2025-05-04:23-05:00\",  \n            \"modified_time\": \"2025-05-05T10:05:25-05:00\"\n        },\n        {\n            \"id\": \"741079000003298002\", \n            \"client_name\": \"The STRO Companies\", \n            \"industry\": \"\", \n            \"created_time\": \"2025-05-01T09:30:38-05:00\",\n            \"modified_time\": \"2025-05-01T09:32:14-05:00\"\n        },\n        {\n            \"id\": \"741079000003257013\", \n            \"client_name\": \"Saronic Maritime\", \n            \"industry\": \"Maritime\", \n            \"created_time\": \"2025-04-22T12:54:09-05:00\",\n            \"modified_time\": \"2025-04-22T13:00:34-05:00\"\n        },\n        {\n            \"id\": \"741079000003222170\", \n            \"client_name\": \"KRC Machine Tool Solutions\", \n            \"industry\": \"Manufacturing\", \n            \"created_time\": \"2025-04-17T15:49:14-05:00\",\n            \"modified_time\": \"2025-04-17T15:50:01-05:00\"\n        }\n    ]\n}\n</code></pre>"},{"location":"CRM%20Example/guides/Developer%20Guide/6_DataArchitecture/","title":"Data Architecture","text":"<p>The following diagram shows the data flow of the ETL process that downloads client and contact data from ZohoRecruit and bulk inserts it to a local SQL Server database. </p> <p>Steps include (for client data, as illustration):</p> <ol> <li>Send a GET request to the <code>https://recruit.zoho.com/recruit/v2/Clients</code> endpoint.</li> <li>Chunk the data to get around Zoho Recruit's download limit.</li> <li>Write the client data to a file called <code>clients.csv</code>.</li> <li>Perform a bulk insert into the SQL Server database.</li> </ol>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/","title":"Installation","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#git-repository","title":"Git Repository","text":"<p>Use one of the following GitHub remote URLs to clone the ZohoDataExplorer repository. You can clone two types of URL addresses:</p> Type URL HTTPS https://github.com/jdifelice3/ZohoDataExplorer.git SSH git@github.com:jdifelice3/ZohoDataExplorer.git <p>If you want to use HTTPS, the git command is: <pre><code>clone https://github.com/jdifelice3/ZohoDataExplorer.git\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#nodejs-node-package-manager-npm","title":"Node.js &amp; Node Package Manager (npm)","text":"<p>Once you have cloned the repository, use Node Package Manager (npm) to install application dependencies. The following table shows the versions of Node.js and npm you should use. Some of the components in ZohoDataExplorer are picky about the version of Node.js installed, notably  AG-Grid.</p> Version node.js v22.14.0 npm 11.4.2 <p>If you do not have npm installed, install it by following the instructions on the nodejs.org site for your operating system. Installing Node.js will also install npm.</p> <p>Install Node.js</p> <p>Once Node.js is installed, open a bash or VS Code terminal and change the directory to where you cloned the ZohoDataExplorer source code.</p> <p>Run the following command:     <pre><code>npm install\n</code></pre></p> <p>This will download and install all dependencies in the package.json file (into the node_modules folder). It contains a json object that contains all packages, including their version numbers.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#packagejson","title":"package.json","text":"<pre><code>{\n  \"name\": \"client\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --config vite.config.js --mode=development\",\n    \"build\": \"vite build --config vite.config.prod.js --mode=production\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\",\n    \"testvite\": \"npx vite --version\",\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"ag-grid-community\": \"^28.2.1\",\n    \"ag-grid-enterprise\": \"^28.2.1\",\n    \"ag-grid-react\": \"^28.2.1\",\n    \"axios\": \"^1.8.4\",\n    \"body-parser\": \"^1.19.0\",\n    \"express\": \"^4.17.1\",\n    \"qs\": \"^6.14.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-querybuilder\": \"^8.5.0\",\n    \"react-router-dom\": \"^7.5.0\",\n    \"react-toastify\": \"^11.0.5\",\n    \"sass\": \"^1.86.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.21.0\",\n    \"@types/react\": \"^19.0.10\",\n    \"@types/react-dom\": \"^19.0.4\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"eslint\": \"^9.21.0\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^15.15.0\",\n    \"nodemon\": \"^2.0.4\",\n    \"sass-loader\": \"^8.0.2\",\n    \"style-loader\": \"^1.3.0\",\n    \"vite\": \"^6.3.4\"\n  },\n  \"packageManager\": \"pnpm@10.14.0+sha512.ad27a79641b49c3e481a16a805baa71817a04bbe06a38d17e60e2eaee83f6a146c6a688125f5792e48dd5ba30e7da52a5cda4c3992b9ccf333f9ce223af84748\"\n}\n</code></pre> <p>If you ever have problems with dependencies, you can simply delete the <code>node_modules</code> folder and rerun <code>npm install</code>.</p> <p>Note that there are two elements with dependency information: <code>\"dependencies\"</code> and <code>\"devDependencies\"</code>. Packages in the  <code>\"dependencies\"</code> element are those required to run the app. The ones in the <code>\"devDependencies\"</code> are only required for  development and will not be deployed to higher environments like Production. <code>\"devDepencies\"</code> are install using the -D option, e.g.: <pre><code>npm install -D eslint\n</code></pre> </p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#vite-build-tool","title":"Vite Build Tool","text":"<p>The ZohoDataExplorer development environment uses Vite instead of the more traditional package bundler, Webpack. You can see it in the \"scripts\" element of the package.json file: <pre><code>\"dev\": \"vite --config vite.config.js --mode=development\",\n</code></pre> The command <code>npm run dev</code> runs Vite.</p> <p>Vite made full-stack debugging much easier, which is a big reason it was chosen over Webpack.</p> <p>Vite requires a config file, <code>vite.config.js</code>, which was downloaded when the project was cloned. </p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#full-stack-debugging","title":"Full-Stack Debugging","text":"<p>At the top of the project folder structure is a folder named <code>.vscode</code>. Within this folder are two files:</p> <code>launch.json</code> a configuration file used to define how the debugger should run an application. It specifies settings such as the program to debug, environment variables, and other parameters needed for debugging sessions. <pre><code>// launch.json for ZohoDataExplorer\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Vite Frontend (Chrome)\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:5173\",\n      \"webRoot\": \"${workspaceFolder}/client/src\",\n      \"preLaunchTask\": \"Start Vite Frontend\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///./src/*\": \"${webRoot}/*\",\n        \"webpack:///*\": \"*\"\n      }\n    },\n    {\n      \"name\": \"Debug Node Backend\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/server/server.js\",\n      \"cwd\": \"${workspaceFolder}/server\",\n      \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n    }\n  ],\n  \"compounds\": [\n    {\n      \"name\": \"Fullstack Debug\",\n      \"configurations\": [\"Debug Node Backend\", \"Debug Vite Frontend (Chrome)\"]\n    }\n  ]\n}\n</code></pre> As shown, the file is set up to debug: <ul> <li>client only (\"Debug Vite Frontend (Chrome)\")</li> <li>server only (\"Debug Node Backend\")</li> <li>both (\"Fullstack Debug\")</li> </ul> <p>If you select \"Fullstack Debug\" when you run the debugger, you'll be able to step all the way through the code, from fontend to backend.</p> <code>tasks.json</code> a configuration file used to define and manage tasks that automate various operations, such as building, testing, or running scripts. It allows users to specify commands, arguments, and other settings for executing tasks directly from the editor. <p>These files configure the VS Code debugger.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/","title":"Third Party Components","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#ag-grid-react","title":"AG-Grid-React","text":"<p>ag-grid-react (npmjs.com)</p> <p>AG Grid is a fully-featured and highly customizable React Data Grid. It delivers outstanding performance and has no third-party dependencies.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#versions","title":"Versions","text":"<p>AG Grid is available in two versions: Community &amp; Enterprise.</p> <code>ag-grid-community</code> is free, available under the MIT license, and comes with all of the core features expected from a React Data Grid, including Sorting, Filtering, Pagination, Editing, Custom Components, Theming and more. <code>ag-grid-enterprise</code> is available under a commercial license and comes with advanced features, like Integrated Charting, Row Grouping, Aggregation, Pivoting, Master/Detail, Server-side Row Model, and Exporting in addition to dedicated support from our Engineering team. <p>For ZohoDataExplorer, both Community and Enterprise are required. The Server-Side Row Model and Master/Detail row features are only available in the Enterprise Edition:</p> <p><pre><code>{...\n\"ag-grid-community\": \"^28.2.1\",\n\"ag-grid-enterprise\": \"^28.2.1\",\n\"ag-grid-react\": \"^28.2.1\",\n...}\n</code></pre> e.g. in the <code>Client.jsx</code> page. <pre><code>&lt;AgGridReact\n           ref={gridRef}\n           columnDefs={columnDefs}\n           defaultColDef={defaultColDef}\n           rowModelType=\"serverSide\"\n           pagination={true}\n           paginationPageSize={50}\n           cacheBlockSize={100}\n           rowSelection=\"single\"\n           getRowId={params =&gt; params.data.id}\n           onGridReady={onGridReady}\n           serverSideStoreType=\"partial\"\n           onCellValueChanged={handleCellValueChanged}\n           domLayout='normal'\n           masterDetail={true}\n           detailCellRendererParams={{\n             getDetailRowData,\n             detailGridOptions: {\n               columnDefs: contactColumnDefs,\n               defaultColDef: {\n                 flex: 1,\n                 minWidth: 150,\n                 sortable: true,\n                 filter: true,\n                 resizable: true\n               }\n             }\n           }}\n           isRowMaster={() =&gt; true}\n           detailRowHeight={300}\n         /&gt;\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#querybuilder","title":"QueryBuilder","text":"<p>react-querybuilder (npmjs.com)</p> <p>React Query Builder is a fully customizable query builder component for React, along with a collection of utility functions for importing from, and exporting to, various query languages like SQL, MongoDB, and more.</p> <p>e.g. in the <code>Client.jsx</code> page. <pre><code>&lt;div&gt;\n    &lt;QueryBuilder\n        fields={clientsQueryFields}\n        query={query}\n        onQueryChange={(q) =&gt; setQuery(q)}\n        controlElements={{ addGroupAction: () =&gt; '' }}\n        translations={customTranslations}\n    /&gt;\n&lt;/div&gt;\n&lt;div className=\"advancedFilterContainer\"&gt;\n    &lt;button className=\"advancedFilter\" onClick={() =&gt; gridRef.current.api.purgeServerSideCache()}&gt;Apply Filter&lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#react-toastify","title":"React Toastify","text":"<p>Toast notifications, or toast messages, are unobtrusive, in-app pop-up messages that provide users with feedback about an operation. Toasts usually disappear after a given time; therefore, removing them doesn\u2019t require any user action. However, you can also close a toast notification before the expiration of the timeout.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/","title":"Component Model","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#indexhtml","title":"index.html","text":"<p>Defines the <code>root</code> div element and loads <code>main.jsx</code> into it.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#mainjsx","title":"main.jsx","text":"<p>Loads the <code>AppRoutes</code> component into the <code>root</code> div element.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#routesjsx","title":"Routes.jsx","text":"<p>The <code>AppRoutes</code> component is defined in this file. Navigation links are mapped to their respective components and added to the <code>App.jsx</code> component. <pre><code>{\n    path: '/',\n    element: &lt;App /&gt;, // layout shell with &lt;Outlet /&gt;\n    children: [\n      {\n        index: true, // the default child route\n        element: &lt;Navigate to=\"/clients\" replace /&gt;\n      },\n      {\n        path: 'clients',\n        element: &lt;ClientsPage /&gt;\n      },\n      {\n        path: 'contacts',\n        element: &lt;ContactsPage /&gt;\n      },\n      {\n        path: 'viewlog', \n        element: &lt;ViewLog /&gt;\n      }\n    ]\n  }\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#appjsx","title":"App.jsx","text":"<p>The App component performs the following functions:</p> <ol> <li>Gets the ETL Job Status. This tells users if the ETL Job is running. This job downloads data from Zoho Recruit and uploads it into the local SQL Server database.</li> <li>Sets the top navigation links.</li> </ol>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/6_CustomHooks/","title":"Custom Hooks","text":"<p>There is one custom hook in ZohoDataExplorer:</p> <code>useSyncRefWithState</code> This hook updates the useRef variable passed into it with the value. <p>arguments:</p> arg Description ref a useRef variable. value the value to which ref.current will be set."},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/","title":"Pages","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#clientsjsx","title":"Clients.jsx","text":"<p>The Clients page contains a data grid that displays client data.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#components","title":"Components","text":"<ul> <li>QueryBuilder</li> <li>AgGridReact</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#hooks","title":"Hooks","text":"Hook Use useState persists QueryBuilder rules. useRef persists a reference to the QueryBuilder object. useMemo memoizes column definitions for the grid. useCallback caches a reference to the function that initializes the grid. useSyncRefWithState a custom hook that updates the useRef variable. useGridInit for middleware logging for the grid."},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#contactsjsx","title":"Contacts.jsx","text":"<p>The Contacts page contains a data grid that displays contact data.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#components_1","title":"Components","text":"<ul> <li>QueryBuilder</li> <li>AgGridReact</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#hooks_1","title":"Hooks","text":"Hook Use useState persists QueryBuilder rules. useRef persists a reference to the QueryBuilder object. useMemo memoizes column definitions for the grid. useCallback caches a reference to the function that initializes the grid. useSyncRefWithState a custom hook that updates the useRef variable. useGridInit for middleware logging for the grid."},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#contactsdetailrendererjsx","title":"ContactsDetailRenderer.jsx","text":"<p>The ContactsDetailRenderer page contains code required to load and render child grids in the Clients and ViewLog pages.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#components_2","title":"Components","text":"<ul> <li>AgGridReact</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#oauthcallbackjsx","title":"OAuthCallback.jsx","text":"<p>This page receives an auth token from Zoho Recruit.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#viewlogjsx","title":"ViewLog.jsx","text":"<p>The ViewLog page contains a data related to REST services and data synchronization jobs.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#components_3","title":"Components","text":"<ul> <li>QueryBuilder</li> <li>AgGridReact</li> </ul>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#hooks_2","title":"Hooks","text":"Hook Use useState persists QueryBuilder rules. useRef persists a reference to the QueryBuilder object. useMemo memoizes column definitions for the grid. useCallback caches a reference to the function that initializes the grid. useSyncRefWithState a custom hook that updates the useRef variable. useGridInit for middleware logging for the grid."},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/1_Installation%20copy/","title":"Installation","text":"<p>Follow the instructions in the Client (React) \"Installation\" page, under the \"Git Repository\" and \"Node.js &amp; Node Package Manager (npm)\" sections.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/1_Installation%20copy/#packagejson","title":"package.json","text":"<pre><code>{\n  \"name\": \"zoho-data-explorer-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"description\": \"Backend for ZohoDataExplorer\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"dev\": \"nodemon server.js --mode=development\",\n    \"start\": \"node server.js --mode=production\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"body-parser\": \"^1.19.0\",\n    \"cors\": \"^2.8.5\",\n    \"csv-parser\": \"^3.2.0\",\n    \"csv-stringify\": \"^6.5.2\",\n    \"express\": \"^4.17.1\",\n    \"fs\": \"^0.0.1-security\",\n    \"json2csv\": \"^5.0.7\",\n    \"mssql\": \"^11.0.1\",\n    \"swagger-jsdoc\": \"^6.2.8\",\n    \"swagger-ui-express\": \"^5.0.1\",\n    \"yamljs\": \"^0.3.0\"\n  },\n  \"devDependencies\": {\n    \"cross-env\": \"^7.0.3\",\n    \"dotenv\": \"^16.4.7\",\n    \"nodemon\": \"^2.0.4\"\n  },\n  \"author\": \"Robert Clarke\",\n  \"license\": \"MIT\"\n}\n</code></pre> <p>Run the server using either one of the two commands, depending if the target environment is development or production.</p> <p><pre><code>nodemon server.js --mode=development\nnode server.js --mode=production\n</code></pre> <code>nodemon</code> is an executable that watches for file changes and reruns the server when a change occurs.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/2_ThirdPartyComponents/","title":"Third Party Packages","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/2_ThirdPartyComponents/#body-parser","title":"Body-Parser","text":"<p>Node.js body parsing middleware.</p> <p>It parses incoming request bodies in middleware before your handlers, available under the req.body property.</p> <p>Note As req.body's shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example the foo property may not be there or may not be a string, and toString may not be a function and instead a string or other user input.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/3_environment%20variables/","title":"Environment Variables","text":"<p>Environment variables are in the <code>.env</code> file. Here are the contents of the file as of this writing. <pre><code>NODE_ENV=development\n\n# ZOHO CREDENTIALS\nZOHO_API_DOMAIN=https://www.zohoapis.com\nZOHO_CLIENT_ID=***********************************\nZOHO_CLIENT_SECRET=******************************************\n\n# ZOHO API REFRESH TOKENS\nZOHO_CAMPAIGN_CONTACTS_ALL_REFRESH_TOKEN=1000.1c6eb7842bd6ec76191ac303e1a80d78.a0341ed0f270955d0e048d642a590b6f    \nZOHO_CAMPAIGN_CONTACTS_UPDATE_REFRESH_TOKEN=1000.75d93603bc98f17da0ba1fd840ecc970.0aae803d410a8aa8f4f08b64b09bd32d\nZOHO_RECRUIT_CLIENT_ALL_REFRESH_TOKEN=1000.e32dec05284b83cab62cb42f26db4397.4f857c8a0bb566b88968eae8421b7177\nZOHO_RECRUIT_MODULES_ALL_REFRESH_TOKEN=1000.1508ce9d03711cc325e5bf8865798d42.6428e64417fc86a49e8a2640131721b7\nZOHO_RECRUIT_SETTINGS_ALL_REFRESH_TOKEN=1000.a91ec564394dabdf2eee9e0bcec35d31.cf52220eb57462c1b251773463970058\nZOHO_RECRUIT_SEARCH_READ_REFRESH_TOKEN=1000.765ed28b7d174beb71614ee941669553.2c04c6cbdd730bb1355b46f84826f9e6\n\n# ZOHO API ENDPOINTS\nZOHO_API_ACCESS_TOKEN_URL=https://accounts.zoho.com/oauth/v2/token\nZOHO_API_ASSOCIATE_CONTACT_TAG_URL=https://campaigns.zoho.com/api/v1.1/tag/associate\nZOHO_API_BASE_URL=https://www.zohoapis.com/crm/v2\nZOHO_API_GET_CLIENTS_URL=https://recruit.zoho.com/recruit/v2/Clients\nZOHO_API_GET_CONTACTS=https://recruit.zoho.com/recruit/v2/Contacts\nZOHO_API_TOKEN_REDIRCT_URL=http://localhost:8080/oauth/callback\nZOHO_API_GET_CONTACTS_SEARCH_URL=https://recruit.zoho.com/recruit/v2/Contacts/search\n\n# SQL SERVER CONFIG\nDB_CONFIG={\"server\": \"localhost\",\"port\": 1433,\"user\": \"NewAdminLogin\",\"password\": \"StrongPassword123!\",\"database\": \"Zoho\",\"options\": {\"encrypt\": false,\"trustServerCertificate\": true}}\nDB_CLIENT_CSV_FILENAME=clients.csv\nDB_CONTACT_CSV_FILENAME=contacts.csv\n\n# SERVER CONFIG\nDB_SERVER_PORT=5000\nDB_WEB_SERVICE_URL=http://localhost:5000\nWEB_SERVER_HOST=localhost\nWEB_SERVER_PORT=5173\nWEB_SERVER_URL=http://localhost:5173\n</code></pre></p> <p>Variables defined in this file are accessible with the <code>process.env</code> object from the <code>dotenv</code> package.</p> <p>NOTE: the <code>.env</code> file should never be checked into git or any other source control because it contains client ids and client secrets.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/4_Express.js/","title":"Express.js Server","text":"<p>Node.js was created to allow full-stack development with JavaScript. Prior to Node.js, JavaScript developers were relegated to writing minor frontend code, like client-side form validation, alerts, prompts, etc. With Node.js, JavaScript developers could write rich, backend features such as web app listeners, REST event handlers, event-driven frameworks, modules that connect to databases and external APIs, middleware for logging and parsing, and realtime messaging through sockets.</p> <p>Fullstack design and development requires a way for the front end app to share data with the backend. This is where Express.js comes in.</p> <p>Using the Express.js node package, developers can create and run a server that hosts REST endpoints to which the front end can send data. Setting up the server requires:</p> <ol> <li>Installing Express.js  <code>npm i express</code>.</li> <li>importing the Express.js package and creating the Express object: <pre><code>import express from 'express';\nconst app = express();\n</code></pre></li> <li>Load the json parsers: <pre><code>app.use(express.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n</code></pre></li> <li>Load other middleware. e.g.: <pre><code>app.use(express.urlencoded({ extended: true }));\n</code></pre></li> <li>Add API routes for communication with the frontend: <pre><code>// === API Routes for AG Grid ===\n\n// fetch paginated, filtered contact data\napp.post('/contactDataService', (req, res) =&gt; {\n    try {\n        getData(req.body, (rows, lastRow) =&gt; {\n          res.json({ rows, lastRow });\n        });\n      } catch (error) {\n        console.error('Error in /contactDataService:', error);\n        res.status(500).json({ error: 'Internal server error' });\n      }\n}); \n</code></pre></li> <li>Listen for requests on a specifie port: <pre><code>const PORT = process.env.PORT || 5000;\napp.listen(PORT, '0.0.0.0', () =&gt; {\n  console.error(`App started at: ${new Date().toISOString()}`);\n});\n</code></pre></li> </ol>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/4_Express.js/#expressjs-rest-functions","title":"Express.js REST functions","text":"<p>The Express object contains functions that match HTTP verbs.</p> <code>app.get(path, callback [, callback ...])</code> Routes HTTP GET requests to the specified path with the specified callback functions. <code>app.get(path, callback [, callback ...])</code> Routes HTTP POST requests to the specified path with the specified callback functions. <code>app.put(path, callback [, callback ...])</code> Routes HTTP PUT requests to the specified path with the specified callback functions. <code>app.delete(path, callback [, callback ...])</code> Routes HTTP DELETE requests to the specified path with the specified callback functions.  <p>For more information, see the 5.x API Express page. For even more information, see the Express Routing Guide.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/5_DatabaseAccess/","title":"SQL Server Access","text":"<p>The following function manages the SQL Server connection pool and should be used when connecting to the database:</p> <pre><code>file:     /server/db/clientDataService.js\n</code></pre> <pre><code>import sql from 'mssql';\n\nlet pool = null;\n\nexport const getDbPool = async () =&gt; {\n  if (!pool || !pool.connected) {\n    try {\n      pool = await sql.connect(JSON.parse(process.env.DB_CONFIG));\n      console.log('\u2705 DB connected');\n    } catch (err) {\n      console.error('\u274c DB connection failed:', err);\n      pool = null; // Ensure a new attempt next time\n      throw err;\n    }\n  }\n  return pool;\n};\n</code></pre> <p>Write functions like this:</p> <pre><code>export async function putClientDB(id, industry) {\n  try {\n    const pool = await getDbPool();\n    await pool.request()\n      .input('id', sql.VarChar, id)\n      .input('industry', sql.VarChar, industry)\n      .query('UPDATE dbo.Clients SET Industry = @industry WHERE id = @id');\n\n    console.log(\"Updated client with id:\", id, \"to industry:\", industry);\n\n    return true;\n  } catch (err) {\n    console.error('SQL error', err);\n    return false;\n  }\n}\n</code></pre>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/","title":"ZohoDataExplorer","text":""},{"location":"CRM%20Example/guides/User%20Guide/introduction/#features","title":"Features","text":"<p>ZohoDataExplorer (ZDE) is a simple yet powerful frontend to the Zoho Recruit cloud application. Here are the high-level requirements:</p> <ol> <li>Speed. Zoho Recruit has a great deal of latency. Users wanted an alternative that returned data fast.</li> <li> Less Clicks. Users wanted an interface that \"made more sense.\" This meant giving them the ability to get the data they need with less clicks.</li> <li> Ease of Use. For even experienced users, Zoho Recruit was difficult to use. Users wanted an alternative that was more intuitive and easier to learn.</li> <li> Better Contact Management. Users wanted to make changes to client metadata and have them automatically applied to underlying contacts.</li> </ol>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#data","title":"Data","text":"<p>Three types of data are displayed in ZDE:</p> <ol> <li>\u00a0Clients - the companies that use our services.</li> <li>\u00a0Contacts - employees of the companies.</li> <li>\u00a0Logs - contain information about data sychronization jobs and data requests.</li> </ol>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#grid-based-data-views","title":"Grid-Based Data Views","text":"<p>Client, Contact, and Log data are displayed in feature-rich grids:</p> <ol> <li>Users can sort data by clicking on the column headings.</li> <li>Users can expand columns.</li> <li>The grids have pagination and load 50 rows at a time, allowing users to quickly navigate the data sets. </li> <li>Users can download grid data to a file.</li> <li>Users can pin columns to the right or left.</li> <li>With one click, users can pull in all contact records for a client.</li> </ol>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#client-searches","title":"Client Searches","text":"<p>Data searches are performed with a query builder. \"Rules\" are search criteria that are combined with a combinator (AND/OR). Rules are added by selecting the desired combinator and then clicking the <code>+ Rule</code> button:</p> <p></p> <p>Users can add one or more rules. Each Client Rule contains:</p> <ul> <li> <p>A column name:</p> Column Client Name Number of Contacts Industry </li> <li> <p>A dropdown list of operators:</p> Operator = \u2260 contains is null is not null </li> <li> <p>A text box.</p> </li> </ul> <p>One Rule. Here, the search returns all clients with names that contain the string \"174\".  Two Rules. Here, the search returns all clients with more than 100 contacts and an industry of \"Maritime\". </p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#contact-searches","title":"Contact Searches","text":"<p>Contact searches work the same way as the Client searches, but with different column names:</p> Column Description Client Name The name of the client First Name The first name of the contact Last Name The last name of the contact Email The email address of the contact Associated Tags Any tags, such as \"Industry\". <p>The search returns all contacts with a first name that contains \"Janet\". The email column has been hidden. </p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#log-searches","title":"Log Searches","text":"<p>Log searches work the same way as the Client and Contact searches, but with different column names and dependencies:</p> Column Description Source Where the log originated. Values are limited to API, DB (database), and SYNC (Zoho Recruit synchronization job.) Action The REST request. Endpoint The REST endpoint. Duration How much time the action took in milliseconds. Status Code The HTTP status code. Error Message Any error message. This field is blank if an error did not exist. <p>The search returns all SYNC logs. </p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#child-grids","title":"Child Grids","text":""},{"location":"CRM%20Example/guides/User%20Guide/introduction/#contacts","title":"Contacts","text":"<p>The grid control used by ZDE allows child grids. The child grids are used to pull in data related to the row selected. In the Clients grid, the first column contains an arrow icon. If a user clicks on the arrow, all contacts for that client are retrieved and a child grid is populated.</p> <p></p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#logs","title":"Logs","text":"<p>The View Log grid also has child grids that show more metadata for the log entry.</p> <p></p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#updating-client-contact-metadata","title":"Updating Client &amp; Contact Metadata","text":"<p>The following screenshot shows a client that does not have an Industry value. Its contacts also do not have Industry values, which woould appear in the associated tags columns. Industry is an important piece of metadata as it is used in text and email campaigns.</p> <p></p> <p>A useful feature of ZDE is the ability to update the industry value for the client, and ZDE automatically updates the associated tags column for all contacts under the client. The client display has only four contacts, but some clients have hundreds.</p> <p>To update the Industry value of a client, a user double clicks on the Industry field in the client row. Once they do, a dropdown list appears with all industry values.</p> <p></p> <p>In the current example, \"Electrical\" was selected for the Industry. ZDE updated the values for the client and all the contacts in bot the local database and immediately in Zoho Recruit.</p> <p></p>"},{"location":"CRM%20Example/guides/User%20Guide/introduction/#zoho-sync-button","title":"Zoho Sync button","text":"<p>A job runs daily that downloads all Zoho Recruit client and contact data and uploads it to the ZDE local SQL Server database. If users need fresh data, they can click the <code>Zoho Sync</code> button as indicated by the red arrow.</p> <p></p> <p>If a job is not running, the button caption will read \"Zoho Sync\". If a job is running, the caption will read \"Syncing...\".</p> <p></p> <p>If a user clicks on the button when the caption reads \"Syncing...\", they will receive a window notification telling them that a job is running.</p> <p></p>"}]}