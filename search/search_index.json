{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hi, I\u2019m John DiFelice, an enterprise architect and published/produced author pivoting into technical writing.</p> <p>I\u2019ve spent 20+ years designing and documenting complex systems (cloud, integration, security, data) and just as long honing the craft of clear, engaging prose through fiction and playwriting. The result is deep technical credibility plus a strong narrative sense. This is what I bring to documentation.</p>"},{"location":"#what-i-bring-to-your-team","title":"What I Bring to Your Team","text":"<ul> <li> <p>Translating complexity into clarity   Architectural decisions, integration patterns, and operational procedures explained for both engineers and stakeholders.</p> </li> <li> <p>Domain Knowledge   \u25e6 Wealth Management and Banking:   \u00a0\u00a0\u00a0\u00a015 years of experience delivering software products for investment firms, banks, \u00a0\u00a0\u00a0\u00a0and REITs.   \u25e6 Health Insurance:   \u00a0\u00a0\u00a0\u00a05 years of experience documenting processes and methodologies for health insurance\u00a0\u00a0\u00a0\u00a0companies.   \u25e6 Telecommunications:   \u00a0\u00a0\u00a0\u00a06 years of experience developing, architecting, documenting, and leading knowledge\u00a0\u00a0\u00a0\u00a0transfer sessions for two large telecommunications companies.   \u25e6 Bitcoin/Crypto:   \u00a0\u00a0\u00a0\u00a03 years running a crypto startup. Produced detailed documentation of the product \u00a0\u00a0\u00a0\u00a0for investors.</p> </li> <li> <p>Docs-as-Code Experience   Markdown, Git, PR reviews, and CI-driven publishing (MkDocs). Treating docs as a first-class part of the build.</p> </li> <li> <p>The right tools   API references (OpenAPI/Swagger), quick starts, diagrams (Visio/Mermaid).</p> </li> <li> <p>Reader-first writing   I apply writing techniques to guide users, set context, reduce cognitive load, and anticipate questions.</p> </li> </ul>"},{"location":"#sample-outputs-youll-find-here","title":"Sample Outputs You\u2019ll Find Here","text":"<ul> <li>Quick Start \u2014 a short path to success with prerequisites, install steps, and common pitfalls.  </li> <li>API Reference \u2014 realistic request/response examples and clear auth guidance.  </li> <li>Home Page \u2014 an example of structure, tone, and scannability.</li> </ul>"},{"location":"#tooling-practices","title":"Tooling &amp; Practices","text":"<ul> <li>Authoring: Markdown, Google Docs, Confluence  </li> <li>Publishing: MkDocs (Material theme), GitHub Pages  </li> <li>APIs: OpenAPI/Swagger, Postman, Redoc-style outputs  </li> <li>Diagrams &amp; Media: Visio, Mermaid, Canva, draw.io.</li> <li>AI Video Tools: Synthesia, Descript, Lumen5.   </li> <li>Collaboration: GitHub, Bitbucket, Jira.</li> </ul>"},{"location":"#background","title":"Background","text":"<ul> <li>Enterprise Architecture: Azure, GCP, Node.js, ASP.NET Core, relational databases (postGres, SQL Server, Oracle), NoSQL databases (MongoDB, Google Firestore), RESTful and graphQL APIs, CI/CD, migration playbooks, incident response runbooks, and data flow documentation.  </li> <li>Creative Writing: two full-length plays produced in Philadelphia, plus a dozen short stories published in print, in anthologies, and online.</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#how-to-contact-me","title":"How to Contact Me:","text":""},{"location":"CRM%20Example/description/","title":"Description","text":"<p>ZohoDataExplorer is a custom CRM app. I wrote 2 guides for it: a User Guide, and a Developer Guide.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/","title":"Introduction","text":"<p>This Developer Guide assumes that developers have experience in both React and Node.js programming.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/#what-is-zohodataexplorer","title":"What is ZohoDataExplorer?","text":"<p>ZohoDataExplorer is a custom front-end for the Zoho Recruit.</p> <p>Zoho Recruit is a cloud-based applicant tracking system (ATS) and CRM system designed to help staffing agencies, corporate HR teams, and recruiters manage the entire hiring process. It\u2019s part of the broader Zoho ecosystem of business applications.</p> <p>Zoho Recruit can be used to manage client and contact data. Unfortunately, the app is not performant, has poorly documented features, is difficult to use--even for experienced users--and custom features developed by Zoho are cost-prohibitive.</p> <p>For these reasons, ZohoDataExplorer was created.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/1_introduction/#technical-details","title":"Technical Details","text":"Name Value Component Type functional Function Format arrow React Type module API Type REST JavaScript Type Common JS"},{"location":"CRM%20Example/guides/Developer%20Guide/2_source%20code%20editor/","title":"Source Code Editor","text":"<p>The recommended source code Editor is VS Code, but you may use whatever editor you like. If you want to use VS Code, but don't have it,  download and install it here:</p> <p>VS Code Download</p> <p>NOTE: Download VS Code, NOT Visual Studio.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/","title":"Project Structure","text":"<p>The VS Code project is full-stack, so it includes both the client and server code.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#client","title":"Client","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#folders","title":"Folders","text":"<p>Here is the directory structure for the client only:</p> <p></p> <p>The folder names are mostly self-explanatory, but here is a table that describes what each contains:</p> Folder Name Parent Description .vscode / A VS Code-specific file that contains launch.json and tasks.json client / The root folder of the front-end code. dist client Contains the build files. node_modules client This folder is created by the npm install process. All packages are contained here. public client Contains static assets (e.g. images) src client The root folder of the client (front-end) source code. assets src Other static assets. config src Functions that manage the development vs. production enrivonments. constants src Constants mostly related to the QueryBuilder component. hooks src Custom React hooks. pages src React components that represent web pages. services src Express.js client functions that call REST APIs on the server. styles src CSS files."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#files","title":"Files","text":"<p>Not all files are listed, only ones that require a description:</p> File Name Folder Description .gitignore client Contains the file and folders git should ignore. eslint.config.js client The ESLint config file. vite.config.js client Uses the <code>mode</code> argument passed in during the vite run call. Values are either <code>development</code> or <code>production</code>. It uses the value to load either <code>vite.config.dev.js</code> or <code>vite.config.prod.js</code>. vite.config.dev.js client The vite.config.js file for development. vite.config.prod.js client The vite.config.js file for production."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#server","title":"Server","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#folders_1","title":"Folders","text":"<p>Here is the directory structure for the server only:</p> <p></p> Folder Name Parent Description auth server Contains <code>zoho.js</code> which has the callback function to receive auth tokens from the Zoho API. config server Contains configuration json objects. middleware server Contains loggin middleware. node_modules server This folder is created by the npm install process. All packages are contained here. routes server Contains a route for the /api/data endpoint. services server Contains service functions for api calls, database connections, and Zoho authorization API calls. api services Functions for api calls. auth services Functions for Zoho API calls. db services Functions for database calls. tests / Test scripts written with <code>node:test</code> and <code>Supertest</code>."},{"location":"CRM%20Example/guides/Developer%20Guide/3_project%20structure/#files_1","title":"Files","text":"<p>Not all files are listed here, only ones that require a description:</p> File Name Folder Description .env server Contains environment variables. .gitignore server Contains the file and folders git should ignore. server.js server The main server code. Contains Express.js REST functions."},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/","title":"Installation","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#git-repository","title":"Git Repository","text":"<p>Use one of the following GitHub remote URLs to clone the ZohoDataExplorer repository. You can clone two types of URL addresses:</p> Type URL HTTPS https://github.com/jdifelice3/ZohoDataExplorer.git SSH git@github.com:jdifelice3/ZohoDataExplorer.git <p>If you want to use HTTPS, the git command is: <pre><code>clone https://github.com/jdifelice3/ZohoDataExplorer.git\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#nodejs-node-package-manager-npm","title":"Node.js &amp; Node Package Manager (npm)","text":"<p>Once you have cloned the repository, use Node Package Manager (npm) to install application dependencies. The following table shows the versions of Node.js and npm you should use. Some of the components in ZohoDataExplorer are picky about the version of Node.js installed, notably  AG-Grid.</p> Version node.js v22.14.0 npm 11.4.2 <p>If you do not have npm installed, install it by following the instructions on the nodejs.org site for your operating system. Installing Node.js will also install npm.</p> <p>Install Node.js</p> <p>Once Node.js is installed, open a bash or VS Code terminal and change the directory to where you cloned the ZohoDataExplorer source code.</p> <p>Run the following command:     <pre><code>npm install\n</code></pre></p> <p>This will download and install all dependencies in the package.json file (into the node_modules folder). It contains a json object that contains all packages, including their version numbers.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#packagejson","title":"package.json","text":"<pre><code>{\n  \"name\": \"client\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --config vite.config.js --mode=development\",\n    \"build\": \"vite build --config vite.config.prod.js --mode=production\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\",\n    \"testvite\": \"npx vite --version\",\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"ag-grid-community\": \"^28.2.1\",\n    \"ag-grid-enterprise\": \"^28.2.1\",\n    \"ag-grid-react\": \"^28.2.1\",\n    \"axios\": \"^1.8.4\",\n    \"body-parser\": \"^1.19.0\",\n    \"express\": \"^4.17.1\",\n    \"qs\": \"^6.14.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-querybuilder\": \"^8.5.0\",\n    \"react-router-dom\": \"^7.5.0\",\n    \"react-toastify\": \"^11.0.5\",\n    \"sass\": \"^1.86.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.21.0\",\n    \"@types/react\": \"^19.0.10\",\n    \"@types/react-dom\": \"^19.0.4\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"eslint\": \"^9.21.0\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^15.15.0\",\n    \"nodemon\": \"^2.0.4\",\n    \"sass-loader\": \"^8.0.2\",\n    \"style-loader\": \"^1.3.0\",\n    \"vite\": \"^6.3.4\"\n  },\n  \"packageManager\": \"pnpm@10.14.0+sha512.ad27a79641b49c3e481a16a805baa71817a04bbe06a38d17e60e2eaee83f6a146c6a688125f5792e48dd5ba30e7da52a5cda4c3992b9ccf333f9ce223af84748\"\n}\n</code></pre> <p>If you ever have problems with dependencies, you can simply delete the <code>node_modules</code> folder and rerun <code>npm install</code>.</p> <p>Note that there are two elements with dependency information: <code>\"dependencies\"</code> and <code>\"devDependencies\"</code>. Packages in the  <code>\"dependencies\"</code> element are those required to run the app. The ones in the <code>\"devDependencies\"</code> are only required for  development and will not be deployed to higher environments like Production. <code>\"devDepencies\"</code> are install using the -D option, e.g.: <pre><code>npm install -D eslint\n</code></pre> </p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#vite-build-tool","title":"Vite Build Tool","text":"<p>The ZohoDataExplorer development environment uses Vite instead of the more traditional package bundler, Webpack. You can see it in the \"scripts\" element of the package.json file: <pre><code>\"dev\": \"vite --config vite.config.js --mode=development\",\n</code></pre> The command <code>npm run dev</code> runs Vite.</p> <p>Vite made full-stack debugging much easier, which is a big reason it was chosen over Webpack.</p> <p>Vite requires a config file, <code>vite.config.js</code>, which was downloaded when the project was cloned.</p> <p>At the top of the project folder structure is a folder named <code>.vscode</code>. Within this folder are two files: </p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/1_Installation/#full-stack-debugging","title":"Full-Stack Debugging","text":"<code>launch.json</code> a configuration file used to define how the debugger should run an application. It specifies settings such as the program to debug, environment variables, and other parameters needed for debugging sessions. <pre><code>// launch.json for ZohoDataExplorer\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Vite Frontend (Chrome)\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:5173\",\n      \"webRoot\": \"${workspaceFolder}/client/src\",\n      \"preLaunchTask\": \"Start Vite Frontend\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///./src/*\": \"${webRoot}/*\",\n        \"webpack:///*\": \"*\"\n      }\n    },\n    {\n      \"name\": \"Debug Node Backend\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/server/server.js\",\n      \"cwd\": \"${workspaceFolder}/server\",\n      \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n    }\n  ],\n  \"compounds\": [\n    {\n      \"name\": \"Fullstack Debug\",\n      \"configurations\": [\"Debug Node Backend\", \"Debug Vite Frontend (Chrome)\"]\n    }\n  ]\n}\n// As shown, the file is set up to debug:\n// - client only\n// - server only\n// - both\n</code></pre> <code>tasks.json</code> a configuration file used to define and manage tasks that automate various operations, such as building, testing, or running scripts. It allows users to specify commands, arguments, and other settings for executing tasks directly from the editor. <p>These files configure the VS Code debugger.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/","title":"Third Party Components","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#ag-grid-react","title":"AG-Grid-React","text":"<p>ag-grid-react (npmjs.com)</p> <p>AG Grid is a fully-featured and highly customizable React Data Grid. It delivers outstanding performance and has no third-party dependencies.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#versions","title":"Versions","text":"<p>AG Grid is available in two versions: Community &amp; Enterprise.</p> <code>ag-grid-community</code> is free, available under the MIT license, and comes with all of the core features expected from a React Data Grid, including Sorting, Filtering, Pagination, Editing, Custom Components, Theming and more. <code>ag-grid-enterprise</code> is available under a commercial license and comes with advanced features, like Integrated Charting, Row Grouping, Aggregation, Pivoting, Master/Detail, Server-side Row Model, and Exporting in addition to dedicated support from our Engineering team. <p>For ZohoDataExplorer, both Community and Enterprise are required. The Server-Side Row Model and Master/Detail row features are only available in the Enterprise Edition:</p> <p><pre><code>{...\n\"ag-grid-community\": \"^28.2.1\",\n\"ag-grid-enterprise\": \"^28.2.1\",\n\"ag-grid-react\": \"^28.2.1\",\n...}\n</code></pre> e.g. in the <code>Client.jsx</code> page. <pre><code>&lt;AgGridReact\n           ref={gridRef}\n           columnDefs={columnDefs}\n           defaultColDef={defaultColDef}\n           rowModelType=\"serverSide\"\n           pagination={true}\n           paginationPageSize={50}\n           cacheBlockSize={100}\n           rowSelection=\"single\"\n           getRowId={params =&gt; params.data.id}\n           onGridReady={onGridReady}\n           serverSideStoreType=\"partial\"\n           onCellValueChanged={handleCellValueChanged}\n           domLayout='normal'\n           masterDetail={true}\n           detailCellRendererParams={{\n             getDetailRowData,\n             detailGridOptions: {\n               columnDefs: contactColumnDefs,\n               defaultColDef: {\n                 flex: 1,\n                 minWidth: 150,\n                 sortable: true,\n                 filter: true,\n                 resizable: true\n               }\n             }\n           }}\n           isRowMaster={() =&gt; true}\n           detailRowHeight={300}\n         /&gt;\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#querybuilder","title":"QueryBuilder","text":"<p>react-querybuilder (npmjs.com)</p> <p>React Query Builder is a fully customizable query builder component for React, along with a collection of utility functions for importing from, and exporting to, various query languages like SQL, MongoDB, and more.</p> <p>e.g. in the <code>Client.jsx</code> page. <pre><code>&lt;div&gt;\n    &lt;QueryBuilder\n        fields={clientsQueryFields}\n        query={query}\n        onQueryChange={(q) =&gt; setQuery(q)}\n        controlElements={{ addGroupAction: () =&gt; '' }}\n        translations={customTranslations}\n    /&gt;\n&lt;/div&gt;\n&lt;div className=\"advancedFilterContainer\"&gt;\n    &lt;button className=\"advancedFilter\" onClick={() =&gt; gridRef.current.api.purgeServerSideCache()}&gt;Apply Filter&lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/2_ThirdPartyComponents/#react-toastify","title":"React Toastify","text":"<p>Toast notifications, or toast messages, are unobtrusive, in-app pop-up messages that provide users with feedback about an operation. Toasts usually disappear after a given time; therefore, removing them doesn\u2019t require any user action. However, you can also close a toast notification before the expiration of the timeout.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3.5_Styling/","title":"Styling","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/","title":"Component Model","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#indexhtml","title":"index.html","text":"<p>Defines the <code>root</code> div element and loads <code>main.jsx</code> into it.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#mainjsx","title":"main.jsx","text":"<p>Loads the <code>AppRoutes</code> component into the <code>root</code> div element.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#routesjsx","title":"Routes.jsx","text":"<p>The <code>AppRoutes</code> component is defined in this file. Navigation links are mapped to their respective components and added to the <code>App.jsx</code> component. <pre><code>{\n    path: '/',\n    element: &lt;App /&gt;, // layout shell with &lt;Outlet /&gt;\n    children: [\n      {\n        index: true, // the default child route\n        element: &lt;Navigate to=\"/clients\" replace /&gt;\n      },\n      {\n        path: 'clients',\n        element: &lt;ClientsPage /&gt;\n      },\n      {\n        path: 'contacts',\n        element: &lt;ContactsPage /&gt;\n      },\n      {\n        path: 'viewlog', \n        element: &lt;ViewLog /&gt;\n      }\n    ]\n  }\n</code></pre></p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/3_Component%20Model/#appjsx","title":"App.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/4_Configuration/","title":"Configuration","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/5_Constants/","title":"Contants","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/6_CustomHooks/","title":"Custom Hooks","text":"<p>There is one custom hook in ZohoDataExplorer:</p> <code>useSyncRefWithState</code> This hook updates the useRef variable passed into it with the new value. <p>arguments:</p> arg Description ref a useRef variable. value the value to which ref.current will be set."},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/","title":"Pages","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#clientsjsx","title":"Clients.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#contactsjsx","title":"Contacts.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#contactsdetailrendererjsx","title":"ContactsDetailRenderer.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#oauthcallbackjsx","title":"OAuthCallback.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/7_Pages/#viewlogjsx","title":"ViewLog.jsx","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Client%20%28React%29/8_Services/","title":"Services","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/1_Installation%20copy/","title":"Installation","text":"<p>Follow the instructions in the Client (React) section, under \"Git Repository\" and \"Node.js &amp; Node Package Manager (npm)\" sections.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/1_Installation%20copy/#packagejson","title":"package.json","text":"<pre><code>{\n  \"name\": \"zoho-data-explorer-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"description\": \"Backend for ZohoDataExplorer\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"dev\": \"nodemon server.js --mode=development\",\n    \"start\": \"node server.js --mode=production\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"body-parser\": \"^1.19.0\",\n    \"cors\": \"^2.8.5\",\n    \"csv-parser\": \"^3.2.0\",\n    \"csv-stringify\": \"^6.5.2\",\n    \"express\": \"^4.17.1\",\n    \"fs\": \"^0.0.1-security\",\n    \"json2csv\": \"^5.0.7\",\n    \"mssql\": \"^11.0.1\",\n    \"swagger-jsdoc\": \"^6.2.8\",\n    \"swagger-ui-express\": \"^5.0.1\",\n    \"yamljs\": \"^0.3.0\"\n  },\n  \"devDependencies\": {\n    \"cross-env\": \"^7.0.3\",\n    \"dotenv\": \"^16.4.7\",\n    \"nodemon\": \"^2.0.4\"\n  },\n  \"author\": \"Robert Clarke\",\n  \"license\": \"MIT\"\n}\n</code></pre> <p>Run the server using either one of the two commands, depending if the target environment is development or production.</p> <p><pre><code>nodemon server.js --mode=development\nnode server.js --mode=production\n</code></pre> <code>nodemon</code> is an executable that watches for file changes and reruns the server when a change occurs.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/2_ThirdPartyComponents/","title":"Third Party Packages","text":""},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/2_ThirdPartyComponents/#body-parser","title":"Body-Parser","text":"<p>Node.js body parsing middleware.</p> <p>It parses incoming request bodies in middleware before your handlers, available under the req.body property.</p> <p>Note As req.body's shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example the foo property may not be there or may not be a string, and toString may not be a function and instead a string or other user input.</p>"},{"location":"CRM%20Example/guides/Developer%20Guide/Server%20%28Node.js%29/3_environment%20variables/","title":"Environment Variables","text":"<p>Environment variables are in the <code>.env</code> file. Here are the contents of the file as of this writing. <pre><code>NODE_ENV=development\n\n# ZOHO CREDENTIALS\nZOHO_API_DOMAIN=https://www.zohoapis.com\nZOHO_CLIENT_ID=***********************************\nZOHO_CLIENT_SECRET=******************************************\n\n# ZOHO API REFRESH TOKENS\nZOHO_CAMPAIGN_CONTACTS_ALL_REFRESH_TOKEN=1000.1c6eb7842bd6ec76191ac303e1a80d78.a0341ed0f270955d0e048d642a590b6f    \nZOHO_CAMPAIGN_CONTACTS_UPDATE_REFRESH_TOKEN=1000.75d93603bc98f17da0ba1fd840ecc970.0aae803d410a8aa8f4f08b64b09bd32d\nZOHO_RECRUIT_CLIENT_ALL_REFRESH_TOKEN=1000.e32dec05284b83cab62cb42f26db4397.4f857c8a0bb566b88968eae8421b7177\nZOHO_RECRUIT_MODULES_ALL_REFRESH_TOKEN=1000.1508ce9d03711cc325e5bf8865798d42.6428e64417fc86a49e8a2640131721b7\nZOHO_RECRUIT_SETTINGS_ALL_REFRESH_TOKEN=1000.a91ec564394dabdf2eee9e0bcec35d31.cf52220eb57462c1b251773463970058\nZOHO_RECRUIT_SEARCH_READ_REFRESH_TOKEN=1000.765ed28b7d174beb71614ee941669553.2c04c6cbdd730bb1355b46f84826f9e6\n\n# ZOHO API ENDPOINTS\nZOHO_API_ACCESS_TOKEN_URL=https://accounts.zoho.com/oauth/v2/token\nZOHO_API_ASSOCIATE_CONTACT_TAG_URL=https://campaigns.zoho.com/api/v1.1/tag/associate\nZOHO_API_BASE_URL=https://www.zohoapis.com/crm/v2\nZOHO_API_GET_CLIENTS_URL=https://recruit.zoho.com/recruit/v2/Clients\nZOHO_API_GET_CONTACTS=https://recruit.zoho.com/recruit/v2/Contacts\nZOHO_API_TOKEN_REDIRCT_URL=http://localhost:8080/oauth/callback\nZOHO_API_GET_CONTACTS_SEARCH_URL=https://recruit.zoho.com/recruit/v2/Contacts/search\n\n# SQL SERVER CONFIG\nDB_CONFIG={\"server\": \"localhost\",\"port\": 1433,\"user\": \"NewAdminLogin\",\"password\": \"StrongPassword123!\",\"database\": \"Zoho\",\"options\": {\"encrypt\": false,\"trustServerCertificate\": true}}\nDB_CLIENT_CSV_FILENAME=clients.csv\nDB_CONTACT_CSV_FILENAME=contacts.csv\n\n# SERVER CONFIG\nDB_SERVER_PORT=5000\nDB_WEB_SERVICE_URL=http://localhost:5000\nWEB_SERVER_HOST=localhost\nWEB_SERVER_PORT=5173\nWEB_SERVER_URL=http://localhost:5173\n</code></pre></p> <p>Variables defined in this file are accessible with the <code>process.env</code> object in the <code>dotenv</code> package.</p> <p>NOTE: the <code>.env</code> file should never be checked into git or any other source control because it contains client ids and client secrets.</p>"}]}